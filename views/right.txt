<div class="title"> <h1>基础</h1> </div> <div class="con1"> <p>基础开始</p> </div> <div class="a2"> <h2>开始</h2> </div> 用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。下用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。下面是个基本例子： <h4>HTML</h4> <pre><code class="lang-<script">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;
&lt;/script&gt;
&lt;div id=&quot;app&quot;&gt;
&lt;h1&gt;Hello App!&lt;/h1&gt;
&lt;p&gt; &lt;!-- 使用 router-link 组件来导航. --&gt;
&lt;!-- 通过传入 `to` 属性指定链接. --&gt;
&lt;!--
&lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;
&lt;router-link to=&quot;/foo&quot;&gt;Go to Foo
&lt;/router-link&gt; &lt;router-link to=&quot;/bar&quot;&gt;Go to Bar
&lt;/router-link&gt; &lt;/p&gt; &lt;!-- 路由出口 --&gt;
&lt;!-- 路由匹配到的组件将渲染在这里 --&gt; &lt;router-view&gt;
&lt;/router-view&gt;
 &lt;/div&gt; </code></pre> <div class="a3"> <h2>动态路由匹配</h2> </div> 我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用『动态路径参数』（dynamic segment）来达到这用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。下个效果： <pre><code class="lang-const"> template: '&lt;div&gt;User&lt;/div&gt;' } const router = new VueRouter({ routes: [ // 动态路径参数 以冒号开头 { path: '/user/:id', component: User } ] }) </code></pre> <div class="title2"> <h1>进阶</h1> </div> <div class="con2"> 进阶开始 </div> <div class="a5"> <h2>导航守卫</h2> </div> <p>正如其名，<code>vue-router</code>提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。</p> <p>记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 <code>$route</code>对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守卫。</p> <div class="a6"> <h2>路由元信息</h2> </div> 用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。下用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。 <p>定义路由的时候可以配置 <code>meta</code>字段：</p> <pre><code class="lang-const"> routes: [ { path: '/foo', component: Foo, children: [ { path: 'bar', component: Bar, // a meta field meta: { requiresAuth: true } } ] } ] }) </code></pre>


